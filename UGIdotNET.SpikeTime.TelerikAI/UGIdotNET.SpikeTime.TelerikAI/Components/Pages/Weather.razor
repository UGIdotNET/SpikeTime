@page "/weather"

<PageTitle>Telerik Blazor App | Weather</PageTitle>

<h1>Weather</h1>

@if (Forecasts == null)
{
    <TelerikLoaderContainer Visible="true" />
}
else
{
    <TelerikGrid Data="@Forecasts"
                 Sortable="true"
                 FilterMode="@GridFilterMode.FilterRow"
                 Pageable="true">
        <GridColumns>
            <GridColumn Field="@nameof(WeatherForecast.Date)" DisplayFormat="{0:d}" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" Title="Temp. (C)" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" Title="Temp. (F)" />
            <GridColumn Field="@nameof(WeatherForecast.Summary)" />
        </GridColumns>
    </TelerikGrid>
}

@code {
    private WeatherForecast[]? Forecasts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(300);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        Forecasts = Enumerable.Range(1, 15).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
